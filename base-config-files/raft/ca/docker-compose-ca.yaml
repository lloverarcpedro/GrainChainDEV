# Compose file for launching the ca dev setup with
# a PostgreSQL for fabric-ca and the tool container

version: '2.4'

networks:
  grainchainnet:
    name: gcbc_grainchainnet
    driver: bridge

# Storage for containers
volumes:
  data-cert-auth.grainchain.io:


services:
  #TLS CA service
  tls-cert-auth.grainchain.io:
    container_name: tls-cert-auth.grainchain.io
    image: hyperledger/fabric-ca
    command: sh -c 'fabric-ca-server start -d -b tls-ca-admin:gc2020 --port 7052'
    environment:
      - FABRIC_CA_SERVER_CA_NAME=tls-cert-auth.grainchain.io
      - FABRIC_CA_SERVER_HOME=/tmp/hyperledger/fabric-ca/crypto
      - COMPOSE_PROJECT_NAME=gcbc
      - FABRIC_CA_SERVER_TLS_ENABLED=true
      - FABRIC_CA_SERVER_CSR_CN=ca-tls
      - FABRIC_CA_SERVER_CSR_HOSTS=0.0.0.0
      - FABRIC_CA_SERVER_DEBUG=false 
    volumes:
      - /vagrant/ca/server/tls-ca:/tmp/hyperledger/fabric-ca 
    depends_on:
      tls-cert-auth-db.grainchain.io:
        condition: service_healthy
    networks:
      - grainchainnet
    ports:
      - 7052:7052

  orderers-cert-auth.grainchain.io:
    container_name: orderers-cert-auth.grainchain.io
    image: hyperledger/fabric-ca
    command: /bin/bash -c 'fabric-ca-server start -d -b rca-orderers-admin:gc2020bc --port 7053' 
    environment:
      - FABRIC_CA_SERVER_HOME=/tmp/hyperledger/fabric-ca/crypto 
      - COMPOSE_PROJECT_NAME=gcbc
      - FABRIC_CA_SERVER_TLS_ENABLED=true
      - FABRIC_CA_SERVER_CSR_CN=rca-orderers
      - FABRIC_CA_SERVER_CSR_HOSTS=0.0.0.0
      - FABRIC_CA_SERVER_DEBUG=false 
    volumes:
      - /vagrant/ca/server/orderers-ca:/tmp/hyperledger/fabric-ca 
    depends_on:
      orderers-cert-auth-db.grainchain.io:
        condition: service_healthy
    networks:
      - grainchainnet 
    ports:
      - 7053:7053
  
  harvx-cert-auth.grainchain.io:
    container_name: harvx-cert-auth.grainchain.io
    image: hyperledger/fabric-ca
    command: /bin/bash -c 'fabric-ca-server start -d -b rca-harvx-admin:gc2020bc --port 7054' 
    environment:
      - FABRIC_CA_SERVER_HOME=/tmp/hyperledger/fabric-ca/crypto 
      - COMPOSE_PROJECT_NAME=gcbc
      - FABRIC_CA_SERVER_TLS_ENABLED=true
      - FABRIC_CA_SERVER_CSR_CN=rca-org1
      - FABRIC_CA_SERVER_CSR_HOSTS=0.0.0.0
      - FABRIC_CA_SERVER_DEBUG=false 
    volumes:
      - /vagrant/ca/server/harvx-ca:/tmp/hyperledger/fabric-ca 
    depends_on:
      harvx-cert-auth-db.grainchain.io:
        condition: service_healthy
    networks:
      - grainchainnet
    ports:
      - 7054:7054
  
  commodity-cert-auth.grainchain.io:
    container_name: commodity-cert-auth.grainchain.io
    image: hyperledger/fabric-ca
    command: /bin/bash -c 'fabric-ca-server start -d -b rca-commodity-admin:gc2020bc --port 7055' 
    environment:
      - FABRIC_CA_SERVER_HOME=/tmp/hyperledger/fabric-ca/crypto 
      - COMPOSE_PROJECT_NAME=gcbc
      - FABRIC_CA_SERVER_TLS_ENABLED=true
      - FABRIC_CA_SERVER_CSR_CN=rca-org2
      - FABRIC_CA_SERVER_CSR_HOSTS=0.0.0.0
      - FABRIC_CA_SERVER_DEBUG=false 
    volumes:
      - /vagrant/ca/server/commodity-ca:/tmp/hyperledger/fabric-ca
    depends_on:
      commodity-cert-auth-db.grainchain.io:
        condition: service_healthy
    networks:
      - grainchainnet 
    ports:
      - 7055:7055

  #TLS CA Postgres DB
  tls-cert-auth-db.grainchain.io:
    container_name: tls-cert-auth-db.grainchain.io
    image: postgres:9.6
    restart: always
    environment:
      - COMPOSE_PROJECT_NAME=gcbc
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=gc2020bc
      - POSTGRES_DB=fabric_ca
    healthcheck:
      #POSTGRES HEALTH CHECK
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 5s
    volumes:
      # Folder for db storage
      - /opt/shared_storage/tls-ca_db_data_postgre:/var/lib/postgresql/data
    ports:
      - 5432:5432
    networks:
      - grainchainnet

  #ORDERERS CA Postgres DB
  orderers-cert-auth-db.grainchain.io:
    container_name: orderers-cert-auth-db.grainchain.io
    image: postgres:9.6
    restart: always
    environment:
      - COMPOSE_PROJECT_NAME=gcbc
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=gc2020bc
      - POSTGRES_DB=fabric_ca
    healthcheck:
      #POSTGRES HEALTH CHECK
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 5s
    volumes:
      # Folder for db storage
      - /opt/shared_storage/orderers-ca_db_data_postgre:/var/lib/postgresql/data
    ports:
      - 5442:5432
    networks:
      - grainchainnet
  
  #HARVX CA Postgres DB
  harvx-cert-auth-db.grainchain.io:
    container_name: harvx-cert-auth-db.grainchain.io
    image: postgres:9.6
    restart: always
    environment:
      - COMPOSE_PROJECT_NAME=gcbc
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=gc2020bc
      - POSTGRES_DB=fabric_ca
    healthcheck:
      #POSTGRES HEALTH CHECK
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 5s
    volumes:
      # Folder for db storage
      - /opt/shared_storage/harvx-ca_db_data_postgre:/var/lib/postgresql/data
    ports:
      - 5452:5432
    networks:
      - grainchainnet

  #COMMODITY CA Postgres DB
  commodity-cert-auth-db.grainchain.io:
    container_name: commodity-cert-auth-db.grainchain.io
    image: postgres:9.6
    restart: always
    environment:
      - COMPOSE_PROJECT_NAME=gcbc
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=gc2020bc
      - POSTGRES_DB=fabric_ca
    healthcheck:
      #POSTGRES HEALTH CHECK
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 5s
    volumes:
      # Folder for db storage
      - /opt/shared_storage/commodity-ca_db_data_postgre:/var/lib/postgresql/data
    ports:
      - 5462:5432
    networks:
      - grainchainnet
